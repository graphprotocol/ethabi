//! Ethereum ABI encoding decoding library.

#![warn(missing_docs)]

extern crate rustc_hex as hex;
extern crate serde;
extern crate serde_json;
extern crate tiny_keccak;

#[macro_use]
extern crate serde_derive;

#[macro_use]
extern crate error_chain;

#[cfg(test)]
#[macro_use]
extern crate hex_literal;

extern crate ethereum_types;

mod constructor;
mod contract;
mod decoder;
mod encoder;
mod errors;
mod event;
mod event_param;
mod filter;
mod function;
mod log;
mod operation;
mod param;
pub mod param_type;
mod signature;
pub mod token;
mod util;

pub use constructor::Constructor;
pub use contract::{Contract, Events, Functions};
pub use decoder::decode;
pub use encoder::encode;
pub use errors::{Error, ErrorKind, Result, ResultExt};
pub use event::Event;
pub use event_param::EventParam;
pub use filter::{RawTopicFilter, Topic, TopicFilter};
pub use function::Function;
pub use log::{Log, LogFilter, LogParam, ParseLog, RawLog};
pub use param::Param;
pub use param_type::ParamType;
pub use token::Token;

/// ABI address.
pub type Address = ethereum_types::Address;

/// ABI fixed bytes.
pub type FixedBytes = Vec<u8>;

/// ABI bytes.
pub type Bytes = Vec<u8>;

/// ABI signed integer.
pub type Int = ethereum_types::U256;

/// ABI unsigned integer.
pub type Uint = ethereum_types::U256;

/// Commonly used FixedBytes of size 32
pub type Hash = ethereum_types::H256;

/// Contract functions generated by ethabi-derive
pub trait FunctionOutputDecoder {
    /// Output types of the contract function
    type Output;

    /// Decodes the given bytes output for the contract function
    fn decode(&self, &[u8]) -> Result<Self::Output>;
}
